Sys.setenv(LANGUAGE = "en") #设置 R 环境的语言为英语，以便在出现错误时显示英文报错信息
gc() #运行垃圾回收器，以释放不再使用的内存
memory.limit(9999999999) #设置 R 可以使用的最大内存限制
set.seed(123) #设置随机种子，以便结果可以重现，这里使用了种子值 123
rm(list = ls())   # 删除所有当前环境中的对象，以确保环境干净。
options(stringsAsFactors = F) #设置字符向量设置为FALSE，防止将字符向量自动转换为因子（在R4.0.0及以后默认已为FALSE）
library(Seurat) # 用于单细胞RNA测序数据的分析和可视化
library(tidyverse) # 包含dplyr, ggplot2等用于数据处理和可视化的包
library(patchwork) # 用于拼接ggplot2图形
library(SCENIC) # 用于细胞状态的基因调控网络推断
library(plyr) # 用于数据处理和操作
library(permute) # 用于排列测试和模拟
library(data.table) # 用于高效的数据操作
library(SCopeLoomR) # 用于处理Loom文件格式
library(pheatmap) # 用于绘制热图
library("biomaRt") # 用于生物数据库查询
library("org.Hs.eg.db") # 人类基因注释数据库
library("org.Mm.eg.db") # 小鼠基因注释数据库
library("DESeq2") # 用于差异表达分析
library(edgeR) # 用于差异表达分析
library(limma) # 用于线性模型和差异表达分析
library("Rgraphviz") # 用于图形可视化
setwd("D:/课题总结/baso的特殊特征/count")  # 设置工作目录到指定路径

#读入数据并合并
# ctrl_1<-read.table("Ctrl-1_FRAS220009649-1r.count",header=T) # 读取Ctrl-1样本的计数文件
# ctrl_2<-read.table("Ctrl-2_FRAS220009650-2r.count",header=T) # 读取Ctrl-2样本的计数文件
# ptp4a3_1<-read.table("PRL3-1-A_FRAS220009651-2r.count",header=T) # 读取PRL3-1-A样本的计数文件
# ptp4a3_2<-read.table("PRL3-1-B_FRAS220009652-1r.count",header=T) # 读取PRL3-1-B样本的计数文件
# ctrl_1<-read.table("Ctrl-1_FRAS220009649-1r.count",header=T) # 读取Ctrl-1样本的计数文件
ctrl_1<-read.table("PRL3-1-A_FRAS220009651-2r.count",header=T) # 读取PRL3-1-A样本的计数文件
ctrl_2<-read.table("Ctrl-2_FRAS220009650-2r.count",header=T) # 读取Ctrl-2样本的计数文件
Ube2c_a1<-read.table("Ube2c-1-A_FRAS220009653-2r.count",header=T) # 读取Ube2c-1-A样本的计数文件
Ube2c_a2<-read.table("Ube2c-1-B_FRAS220009654-2r.count",header=T) # 读取Ube2c-1-B样本的计数文件
Ube2c_b1<-read.table("Ube2c-2-A_FRAS220009655-1r.count",header=T) # 读取Ube2c-2-A样本的计数文件
Ube2c_b2<-read.table("Ube2c-2-B_FRAS220009656-2r.count",header=T) # 读取Ube2c-2-B样本的计数文件

#合并数据
data<-merge(ctrl_1,ctrl_2,by=c("Geneid","Chr","Start","End","Strand","Length"))
data<-merge(data,Ube2c_a1,by=c("Geneid","Chr","Start","End","Strand","Length"))
data<-merge(data,Ube2c_a2,by=c("Geneid","Chr","Start","End","Strand","Length"))
data<-merge(data,Ube2c_b1,by=c("Geneid","Chr","Start","End","Strand","Length"))
data<-merge(data,Ube2c_b2,by=c("Geneid","Chr","Start","End","Strand","Length"))

WT_count <- data  # 将合并后的数据赋值给WT_count

head(WT_count)  # 查看WT_count的前六行数据
dim(WT_count)  # 查看WT_count的数据维度（行数和列数）
colnames(WT_count)  # 查看WT_count的列名

#删除ensmusg的版本号

# WT_count$Geneid<-gsub("\\.*","",WT_count$Geneid)  # 移除Geneid列中的所有点（.）
# WT_count$Geneid <- gsub("\\.[0-9]*$", "", WT_count$Geneid)  # 移除Geneid列中点（.）后面的数字
rownames(WT_count) <- WT_count$Geneid  # 将WT_count的行名设置为Geneid列的值
# 参考链接：https://www.nhooo.com/note/qa02b6.html
# 参考链接：https://www.biostars.org/p/178726/
WT_count_all <- WT_count[,c(1,6:12)]  # 选择WT_count的特定列，创建新数据框WT_count_all
head(WT_count_all)  # 查看WT_count_all的前六行数据
colnames(WT_count_all) <- c("Geneid","Length","ctrl_1","ctrl_2","Ube2c_a1","Ube2c_a2","Ube2c_b1","Ube2c_b2")  # 设置WT_count_all的列名

cts <- WT_count_all  # 将WT_count_all赋值给新变量cts
head(cts)  # 查看cts的前六行数据
dim(cts)  # 查看cts的维度（行数和列数）

write.csv(cts, "ensembl_gene_expression_count_ube2c.csv")  # 将cts写入CSV文件，文件名为"ensembl_gene_expression_count_ube2c.csv"

#基因ID转换
# 加载必要的库
library('biomaRt')  # 连接并获取生物信息数据库
library("curl")  # 处理URL请求
library(ensembldb)  # 提供ensembl数据库的R接口
library(dplyr)  # 数据操作和处理
library(AnnotationHub)  # 管理和检索注释数据

# 使用ensembl数据库中的人类基因数据集
mart <- useDataset("mmapiens_gene_ensembl", useMart("ensembl"))
saveRDS(mart, "mart_human.rds")  # 保存mart对象到文件
mart <- readRDS("mart_human.rds")  # 从文件中读取mart对象

# 读取基因表达数据
gene <- read.csv("ensembl_gene_expression_count_anxiuli.csv")
gene <- as.matrix(gene$X)  # 将数据转换为矩阵
head(gene)  # 查看基因数据的前几行
colnames(gene)[1] <- "ensembl_gene_id"  # 重命名基因数据的列名

# 获取基因注释信息
# listAttributes(mart)  # 列出可用的属性
id_con <- getBM(attributes = c('ensembl_gene_id', 'external_gene_name', "description"), filters = 'ensembl_gene_id', values = gene, mart = mart)
head(id_con)  # 查看获取的基因注释信息的前几行
write.csv(id_con, "human_gene_ensembl_transition.csv")  # 将基因注释信息保存为CSV文件

# 加载必要的字符串处理库
library(stringr)  
# cts$Geneid <- str_sub(cts$Geneid, 1, str_locate(cts$Geneid, "\\.")[1] - 1)  # 删除Geneid中的点号后部分
id_con <- read.csv("mouse_gene_ensembl_transition.csv")  # 读取鼠基因注释信息
id_con <- id_con[, c(2, 3)]  # 选择感兴趣的列

# 合并基因注释信息和表达数据
colnames(cts)[1] <- "ensembl_gene_id"  # 重命名cts的列名
head(cts)  # 查看cts的前几行
head(id_con)  # 查看id_con的前几行
cts <- merge(id_con, cts, by = c("ensembl_gene_id"))  # 按照ensembl_gene_id合并数据
dim(cts)  # 查看合并后数据的维度

# 保存合并后的数据
write.csv(cts, file = "ternimalE_count_genesymbol.csv", row.names = F)
cts <- cts[, -1]  # 删除第一列
cts$external_gene_name <- make.names(cts$external_gene_name, unique = TRUE)  # 确保基因名唯一
rownames(cts) <- cts$external_gene_name  # 设置行名为基因名
write.table(cts, "data.txt", sep = "\t")  # 将数据保存为文本文件


# 读取count文件并保存为CSV
write.csv(cts, file = "ternimalE_count.csv")

# 读取TPM文件：
head(cts)  # 查看cts数据的前几行
kb <- cts$Length / 1000  # 将基因长度转换为kb
head(kb)  # 查看转换后的kb数据的前几行
countdata <- cts[, 3:8]  # 提取count数据
rpk <- countdata / kb  # 计算每千碱基的reads数
head(rpk)  # 查看rpk数据的前几行
tpm <- t(t(rpk) / colSums(rpk) * 1000000)  # 计算TPM值
head(tpm)  # 查看tpm数据的前几行
write.csv(tpm, file = "ternimalE_tpm.csv")  # 保存tpm数据为CSV文件

# 读取FPKM文件：
fpkm <- t(t(rpk) / colSums(countdata) * 10^6)  # 计算FPKM值
head(fpkm)  # 查看fpkm数据的前几行
write.csv(fpkm, file = "ternimalE_fpkm.csv")  # 保存fpkm数据为CSV文件

# PCA分析
condition <- factor(c("ctrl", "ctrl", "Ube2c_a", "Ube2c_a", "Ube2c_b", "Ube2c_b"),
                    levels = c("ctrl", "Ube2c_a", "Ube2c_b"))  # 定义样本的条件
head(cts)  # 查看cts数据的前几行
tmp <- cts[, 3:8]  # 提取样本数据
head(tmp)  # 查看tmp数据的前几行
colData <- data.frame(row.names = colnames(cts[, 3:8]), condition)  # 创建colData数据框
head(colData, 10)  # 查看colData的前10行
dds_all <- DESeqDataSetFromMatrix(countData = cts[, 3:8], colData = colData, design = ~condition)  # 创建DESeq数据集
head(dds_all)  # 查看dds_all数据的前几行
dds_all <- DESeq(dds_all)  # 执行DESeq分析
vsd_all <- vst(dds_all, blind = FALSE)  # 进行vst转换
head(vsd_all)  # 查看vsd_all数据的前几行
dist(t(assay(vsd_all)))  # 计算样本间的距离
plotPCA(vsd_all, intgroup = "condition")  # 绘制PCA图

# 样本的聚类图
sampleDists <- dist(t(assay(vsd_all)))  # 计算样本间的距离
library("RColorBrewer")  # 加载颜色库
library(pheatmap)  # 加载pheatmap库
sampleDistMatrix <- as.matrix(sampleDists)  # 将距离数据转换为矩阵
rownames(sampleDistMatrix) <- paste(vsd_all$condition, vsd_all$type, sep = "")  # 设置行名
colnames(sampleDistMatrix) <- NULL  # 清空列名
colors <- colorRampPalette(rev(brewer.pal(9, "Blues")))(255)  # 定义颜色梯度
pheatmap(sampleDistMatrix,
         clustering_distance_rows = sampleDists,
         clustering_distance_cols = sampleDists,
         col = colors)  # 绘制热图

# 计算和绘制样本相关性热图
cts <- cts[, 3:8]  # 提取样本数据
cor(cts, method = "pearson")  # 计算样本相关性矩阵
# ctrl_1    ctrl_2  ptp4a3_1  ptp4a3_2
# ctrl_1   1.0000000 0.9863111 0.8094934 0.5713300
# ctrl_2   0.9863111 1.0000000 0.7706288 0.5144732
# ptp4a3_1 0.8094934 0.7706288 1.0000000 0.9099334
# ptp4a3_2 0.5713300 0.5144732 0.9099334 1.0000000
heatmap(cor(cts))  # 绘制相关性热图


# 做一下差异表达分析
res_all <- results(dds_all)  # 获取差异表达结果
head(res_all)  # 查看差异表达结果的前几行
res_all <- res_all[order(res_all$padj),]  # 按padj排序结果
head(res_all)  # 查看排序后的结果的前几行
diff_gene <- subset(res_all, padj < 0.05 & (log2FoldChange < -1 | log2FoldChange > 1))  # 筛选显著差异基因
head(diff_gene)  # 查看显著差异基因的前几行
dim(diff_gene)  # 查看显著差异基因的维度
head(res_all)  # 再次查看差异表达结果的前几行
write.csv(diff_gene, file = "diff_gene_all.csv", row.names = TRUE)  # 保存显著差异基因为CSV文件

# 上调和下调基因的分析和保存
diff_gene_up <- subset(res_all, padj < 0.05 & (log2FoldChange > 1))  # 筛选显著上调基因
write.csv(diff_gene_up, file = "diff_gene_up.csv", row.names = TRUE)  # 保存显著上调基因为CSV文件
diff_gene_down <- subset(res_all, padj < 0.05 & (log2FoldChange < -1))  # 筛选显著下调基因
write.csv(diff_gene_down, file = "diff_gene_down.csv", row.names = TRUE)  # 保存显著下调基因为CSV文件
head(diff_gene_down)  # 查看显著下调基因的前几行
dim(diff_gene)  # 查看显著差异基因的维度
dim(diff_gene_up)  # 查看显著上调基因的维度
dim(diff_gene_down)  # 查看显著下调基因的维度

# 合并差异表达结果与归一化后的计数数据
resdata <- merge(as.data.frame(res_all), as.data.frame(counts(dds_all, normalized = TRUE)), by = "row.names", sort = FALSE)
write.csv(resdata, file = "DEG_all.csv", row.names = FALSE)  # 保存合并结果为CSV文件
head(resdata)  # 查看合并结果的前几行
resdata <- res_all[order(resdata$pvalue),]  # 按p值排序结果数据
summary(resdata)  # 查看结果数据的摘要
table(resdata$padj < 0.05)  # 统计padj小于0.05的基因个数

# 热图分析
diff_gene <- as.data.frame(diff_gene)  # 将显著差异基因转换为数据框
term <- rownames(diff_gene)  # 获取显著差异基因的基因名
newdata <- cts[c(term),]  # 提取显著差异基因的表达数据
pheatmap(newdata, scale = "row", border_color = NA)  # 绘制热图
pheatmap(newdata, scale = "row", border_color = NA, show_rownames = FALSE)  # 绘制不显示行名的热图

newdata <- cts[c(labelGene$gene),]  # 提取labelGene基因的表达数据
pheatmap(newdata, scale = "row", border_color = NA, color = colorRampPalette(colors = c("blue", "white", "red"))(100))  # 绘制热图

pheatmap(newdata, scale = "row", cluster_rows = TRUE, border_color = NA, color = colorRampPalette(colors = c("blue", "white", "red"))(100))  # 绘制聚类热图

pheatmap(newdata, cluster_rows = TRUE, scale = "row", clustering_method = "average", fontsize = 5, fontsize_row = 5, fontsize_col = 10, color = colorRampPalette(rev(c("red", "white", "blue")))(102))  # 绘制带有平均聚类方法的热图

# 加载分析所需的库
library(tidyverse)  # 加载tidyverse库
library(magrittr)  # 加载magrittr库
library(glue)  # 加载glue库
library(data.table)  # 加载data.table库

# 加载差异表达分析所需的库
library(DESeq2)  # 加载DESeq2库

# 加载绘图所需的库
library(ggplot2)  # 加载ggplot2库
library(ggrepel)  # 加载ggrepel库
library(ggsci)  # 加载ggsci库
library(scales)  # 加载scales库
library(latex2exp)  # 加载latex2exp库

# 读取差异表达分析结果
diffData <- fread("DEG_all.csv")  # 读取DEG_all.csv文件
colnames(diffData)[1] <- "gene"  # 设置第一列列名为gene
diffData[is.na(padj), padj := 1][]  # 将padj值为NA的设置为1
diffData[, p := -log10(padj)][]  # 计算p值的负对数

# 设置基因类型
diffData[, type := "ns"][]  # 设置基因类型为ns（非显著）
diffData[log2FoldChange > 1 & padj < 0.05, type := "up"][log2FoldChange < -1 & padj < 0.05, type := "down"][]  # 设置显著上调和下调基因类型

# 筛选需要标注的基因
labelGene1 <- diffData[order(p, decreasing = TRUE)][type == "up"][1:10]  # 筛选显著上调基因中p值最高的前10个基因
labelGene2 <- diffData[order(p, decreasing = TRUE)][type == "down"][1:10]  # 筛选显著下调基因中p值最高的前10个基因
labelGene <- rbind(labelGene1, labelGene2)  # 合并上调和下调基因
labelGene <- rbind(labelGene, diffData[1685,])  # 添加特定基因（Ptp4a3）

# 设置ggrepel的最大重叠数
options(ggrepel.max.overlaps = Inf)

# 设置颜色
typeColor <- structure(
  c(pal_nejm()(2), "gray80"),
  names = c("up", "down", "ns")
)

# 绘制火山图
ggplot(diffData, aes(x = log2FoldChange, y = p)) +
  geom_point(aes(color = type, size = p), show.legend = FALSE) +
  geom_hline(yintercept = -log10(0.05), color = "gray60", linetype = "dashed") +
  geom_vline(xintercept = 1, color = "gray60", linetype = "dashed") +
  geom_vline(xintercept = -1, color = "gray60", linetype = "dashed") +
  geom_text_repel(
    data = labelGene, aes(label = gene),
    size = 3, fontface = 3,
    nudge_x = .5, nudge_y = .5) +
  scale_radius(range = c(.1, 2)) +
  scale_color_manual(values = typeColor) +
  scale_y_continuous(expand = expansion(c(0, 0.05))) +
  labs(
    x = TeX("$log_{2}(Fold\\,Change)$"),
    y = TeX("$-log_{10}(\\textit{P}\\,value)$")) +
  theme(
    aspect.ratio = 1,
    panel.background = element_blank(),
    panel.grid = element_blank(),
    axis.line = element_line()) +
  labs(title = "ptp4a3 KD volcano plot")

# 保存火山图
ggsave("ptp4a3 KD_volcano2.pdf")  # 保存火山图为PDF文件
ggsave("ptp4a3 KD_volcano.pdf", width = 6, height = 6)  # 保存火山图为指定尺寸的PDF文件

# 设置结果名称
resname <- c("ptp4a3 KD")  # 设置结果名称为ptp4a3 KD


# 下调基因的功能富集分析
library(clusterProfiler)  # 加载clusterProfiler库
library("org.Mm.eg.db")  # 加载org.Mm.eg.db库
library(ggplot2)  # 加载ggplot2库

b <- as.data.frame(rownames(diff_gene_down))  # 将下调基因转换为数据框
eg <- bitr(b$`rownames(diff_gene_down)`, fromType = "SYMBOL", toType = "ENTREZID", OrgDb = "org.Mm.eg.db")  # 将基因符号转换为Entrez ID
gene <- eg[, 2]  # 获取Entrez ID
head(gene)  # 查看前几行的Entrez ID

# 分子功能(MolecularFunction)
ego <- enrichGO(
  gene = gene,
  keyType = "ENTREZID",
  OrgDb = org.Mm.eg.db,
  ont = "MF",
  pAdjustMethod = "BH",
  pvalueCutoff = 0.05,
  qvalueCutoff = 0.05,
  readable = TRUE
)
barplot(ego, showCategory = 50)  # 绘制条形图
ggsave(paste0("barplot_GO_MF_down_", resname, ".pdf"), width = 20, height = 20)  # 保存条形图为PDF文件
dotplot(ego, showCategory = 50)  # 绘制点图
ggsave(paste0("dotplot_GO_MF_down_", resname, ".pdf"), width = 20, height = 20)  # 保存点图为PDF文件
write.csv(ego, file = paste0("GO_MF_down_", resname, ".csv"))  # 将结果保存为CSV文件

# 生物过程(biologicalprocess)
ego <- enrichGO(
  gene = gene,
  keyType = "ENTREZID",
  OrgDb = org.Mm.eg.db,
  ont = "BP",
  pAdjustMethod = "BH",
  pvalueCutoff = 0.05,
  qvalueCutoff = 0.05,
  readable = TRUE
)
barplot(ego, showCategory = 50)  # 绘制条形图
ggsave(paste0("barplot_GO_BP_down_", resname, ".pdf"), width = 20, height = 20)  # 保存条形图为PDF文件
dotplot(ego, showCategory = 50)  # 绘制点图
ggsave(paste0("dotplot_GO_BP_down_", resname, ".pdf"), width = 20, height = 20)  # 保存点图为PDF文件
write.csv(ego, file = paste0("GO_BP_down_", resname, ".csv"))  # 将结果保存为CSV文件

# 细胞组成(cellularcomponent)
ego <- enrichGO(
  gene = gene,
  keyType = "ENTREZID",
  OrgDb = org.Mm.eg.db,
  ont = "CC",
  pAdjustMethod = "BH",
  pvalueCutoff = 0.05,
  qvalueCutoff = 0.05,
  readable = TRUE
)
barplot(ego, showCategory = 50)  # 绘制条形图
ggsave(paste0("barplot_GO_CC_down_", resname, ".pdf"), width = 20, height = 20)  # 保存条形图为PDF文件
dotplot(ego, showCategory = 50)  # 绘制点图
ggsave(paste0("dotplot_GO_CC_down_", resname, ".pdf"), width = 20, height = 20)  # 保存点图为PDF文件
write.csv(ego, file = paste0("GO_CC_down_", resname, ".csv"))  # 将结果保存为CSV文件

# KEGG富集分析
ekegg <- enrichKEGG(
  gene = gene,
  keyType = "kegg",
  organism = "mmu",
  pvalueCutoff = 0.05,
  pAdjustMethod = "BH",
  qvalueCutoff = 0.05
)
barplot(ekegg, showCategory = 50)  # 绘制条形图
ggsave(paste0("barplot_KEGG_down_", resname, ".pdf"), width = 20, height = 20)  # 保存条形图为PDF文件
dotplot(ekegg, showCategory = 50)  # 绘制点图
ggsave(paste0("dotplot_KEGG_down_", resname, ".pdf"), width = 20, height = 20)  # 保存点图为PDF文件
write.csv(ekegg, file = paste0("KEGG_down_", resname, ".csv"))  # 将结果保存为CSV文件

# 综合GO富集分析
ego <- enrichGO(
  gene = gene,
  OrgDb = org.Mm.eg.db,
  pvalueCutoff = 0.05,
  qvalueCutoff = 0.05,
  ont = "all",
  readable = TRUE
)
barplot(ego, showCategory = 50)  # 绘制条形图
ggsave(paste0("barplot_GO_MFBPCC_down_", resname, ".pdf"), width = 20, height = 20)  # 保存条形图为PDF文件
barplot(ego, drop = TRUE, showCategory = 20, split = "ONTOLOGY") + facet_grid(ONTOLOGY ~ ., scale = 'free')  # 绘制分面条形图
ggsave(paste0("barplot_GO_MFBPCC_down_facet_grid_", resname, ".pdf"), width = 20, height = 20)  # 保存分面条形图为PDF文件
dotplot(ego, showCategory = 50)  # 绘制点图
ggsave(paste0("dotplot_GO_MFBPCC_down_", resname, ".pdf"), width = 20, height = 20)  # 保存点图为PDF文件
dotplot(ego, drop = TRUE, showCategory = 20, split = "ONTOLOGY") + facet_grid(ONTOLOGY ~ ., scale = 'free')  # 绘制分面点图
ggsave(paste0("dotplot_GO_MFBPCC_down_facet_grid_", resname, ".pdf"), width = 20, height = 20)  # 保存分面点图为PDF文件
write.csv(ego, file = paste0("GO_MFBPCC_down_", resname, ".csv"))  # 将结果保存为CSV文件


# 上调基因的功能富集分析
library(clusterProfiler)  # 加载clusterProfiler库
library("org.Mm.eg.db")  # 加载org.Mm.eg.db库
library(ggplot2)  # 加载ggplot2库

b <- as.data.frame(rownames(diff_gene_up))  # 将上调基因转换为数据框
eg <- bitr(b$`rownames(diff_gene_up)`, fromType = "SYMBOL", toType = "ENTREZID", OrgDb = "org.Mm.eg.db")  # 将基因符号转换为Entrez ID
gene <- eg[, 2]  # 获取Entrez ID
head(gene)  # 查看前几行的Entrez ID

# 分子功能(MolecularFunction)
ego <- enrichGO(
  gene = gene,
  keyType = "ENTREZID",
  OrgDb = org.Mm.eg.db,
  ont = "MF",
  pAdjustMethod = "BH",
  pvalueCutoff = 0.05,
  qvalueCutoff = 0.05,
  readable = TRUE
)
barplot(ego, showCategory = 50)  # 绘制条形图
ggsave(paste0("barplot_GO_MF_up_", resname, ".pdf"), width = 20, height = 20)  # 保存条形图为PDF文件
dotplot(ego, showCategory = 50)  # 绘制点图
ggsave(paste0("dotplot_GO_MF_up_", resname, ".pdf"), width = 20, height = 20)  # 保存点图为PDF文件
write.csv(ego, file = paste0("GO_MF_up_", resname, ".csv"))  # 将结果保存为CSV文件

# 生物过程(biologicalprocess)
ego <- enrichGO(
  gene = gene,
  keyType = "ENTREZID",
  OrgDb = org.Mm.eg.db,
  ont = "BP",
  pAdjustMethod = "BH",
  pvalueCutoff = 0.05,
  qvalueCutoff = 0.05,
  readable = TRUE
)
barplot(ego, showCategory = 50)  # 绘制条形图
ggsave(paste0("barplot_GO_BP_up_", resname, ".pdf"), width = 20, height = 20)  # 保存条形图为PDF文件
dotplot(ego, showCategory = 50)  # 绘制点图
ggsave(paste0("dotplot_GO_BP_up_", resname, ".pdf"), width = 20, height = 20)  # 保存点图为PDF文件
write.csv(ego, file = paste0("GO_BP_up_", resname, ".csv"))  # 将结果保存为CSV文件

# 细胞组成(cellularcomponent)
ego <- enrichGO(
  gene = gene,
  keyType = "ENTREZID",
  OrgDb = org.Mm.eg.db,
  ont = "CC",
  pAdjustMethod = "BH",
  pvalueCutoff = 0.05,
  qvalueCutoff = 0.05,
  readable = TRUE
)
barplot(ego, showCategory = 50)  # 绘制条形图
ggsave(paste0("barplot_GO_CC_up_", resname, ".pdf"), width = 20, height = 20)  # 保存条形图为PDF文件
dotplot(ego, showCategory = 50)  # 绘制点图
ggsave(paste0("dotplot_GO_CC_up_", resname, ".pdf"), width = 20, height = 20)  # 保存点图为PDF文件
write.csv(ego, file = paste0("GO_CC_up_", resname, ".csv"))  # 将结果保存为CSV文件

# KEGG富集分析
ekegg <- enrichKEGG(
  gene = gene,
  keyType = "kegg",
  organism = "mmu",
  pvalueCutoff = 0.05,
  pAdjustMethod = "BH",
  qvalueCutoff = 0.05
)
barplot(ekegg, showCategory = 50)  # 绘制条形图
ggsave(paste0("barplot_KEGG_up_", resname, ".pdf"), width = 20, height = 20)  # 保存条形图为PDF文件
dotplot(ekegg, showCategory = 50)  # 绘制点图
ggsave(paste0("dotplot_KEGG_up_", resname, ".pdf"), width = 20, height = 20)  # 保存点图为PDF文件
write.csv(ekegg, file = paste0("KEGG_up_", resname, ".csv"))  # 将结果保存为CSV
#https://zhuanlan.zhihu.com/p/377356510


# GSEA富集图:
library(clusterProfiler)  # 加载clusterProfiler库
library(DOSE)  # 加载DOSE库
library(enrichplot)  # 加载enrichplot库

ridgeplot(GSEA_KEGG)  # 绘制ridgeplot
gseaplot2(GSEA_KEGG, 1)  # 绘制GSEA富集图，显示第1个结果
gseaplot2(GSEA_KEGG, 1:30)  # 绘制GSEA富集图，显示前30个结果，根据ridgeplot中的通路数量确定

gseaplot2(GSEA_KEGG, 2, pvalue_table = TRUE)  # 绘制GSEA富集图，显示第212个结果，并输出p值表格

## R语言准备gsea输入文件
library(Seurat)  # 加载Seurat库
library(tidyverse)  # 加载tidyverse库
library(GSEA)  # 加载GSEA库
dir.create("GSEA")  # 创建GSEA目录
dir.create("GSEA/input")  # 创建GSEA输入目录
dir.create("GSEA/output")  # 创建GSEA输出目录

expr <- cts  # 提取表达数据
expr <- data.frame(NAME = rownames(expr), Description = rep('na', nrow(expr)), expr, stringsAsFactors = F)  # 创建表达数据框
write('#1.2', "GSEA/input/expr.gct", ncolumns = 1)  # 写入表头信息
write(c(nrow(expr), (ncol(expr) - 2)), "GSEA/input/expr.gct", ncolumns = 2, append = T, sep = '\t')  # 写入表格的行列数信息
write.table(expr, "GSEA/input/expr.gct", row.names = F, sep = '\t', append = T, quote = F)  # 写入表达数据
line.1 <- c((ncol(expr) - 2), 2, 1)  # 创建cls文件的第一行信息
tmp <- c("ctrl", "pta4a3")  # 创建cls文件的第二行信息
line.2 <- c("#", c("ctrl", "pta4a3"))  # 创建cls文件的第二行信息
line.3 <- c("ctrl", "ctrl", "pta4a3", "pta4a3")  # 创建cls文件的第三行信息
write(line.1, 'GSEA/input/group.cls', ncolumns = length(line.1), append = T, sep = '\t')  # 写入cls文件
write(line.2, 'GSEA/input/group.cls', ncolumns = length(line.2), append = T, sep = '\t')  # 写入cls文件
write(line.3, 'GSEA/input/group.cls', ncolumns = length(line.3), append = T, sep = '\t')  # 写入cls文件

# gs.db参数对应的是基因集数据文件，这里只对kegg收录的基因集做了分析
GSEA::GSEA("GSEA/input/expr.gct", "GSEA/input/group.cls", 
           gs.db = "D:/生信学习/GEO/MsigDB/symbols/c2.all.v6.2.symbols.gmt", output.directory = "GSEA/output/")

# 提取数据做PCA，将PC2改为PC3，可看PC1和PC3直接的富集
rv <- rowVars(assay(vsd_all))  # 计算每行的方差
select <- order(rv, decreasing = TRUE)[seq_len(min(ntop = 2000, length(rv)))]  # 选择前2000个方差最大的行
pca <- prcomp(t(assay(vsd_all)[select, ]))  # 对所选数据进行PCA分析
percentVar <- pca$sdev^2 / sum(pca$sdev^2)  # 计算每个主成分的方差解释比例
summary(pca)  # 打印PCA的摘要信息
eigenvalues <- data.frame(sort(abs(pca$rotation[,"PC2"]), decreasing = TRUE)[1:500])  # 提取前500个PC2的特征向量绝对值较大的值
write.csv(eigenvalues, file = "pc2.csv", row.names = T)  # 将结果保存为CSV文件

